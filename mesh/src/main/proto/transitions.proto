syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.bluecc.hubs.stub";
option java_outer_classname = "TransitionsProto";
option objc_class_prefix = "TSP";

package transitions;

import "routines.proto";

enum MeshTypes{
    DEFAULT_TYPE=0;
    
    PRODUCT_REVIEW = 1;
    PURCHASE_SHIPMENT = 2;
    CONTENT = 3;
    KEYWORD = 4;
    SERIALIZED_INVENTORY_ITEM = 5;
    ALLOCATION_PLAN_STATUS = 6;
    QUOTE_STATUS = 7;
    ORDER_DELIVERY_SCHEDULE = 8;
    PRODUCT_STATUS = 9;
    PARTY_RELATIONSHIP = 10;
    ORDER_RETURN_STATUS_FOR_SUPPLIER_RETURNS = 11;
    PRODUCTION_RUN_STATUS = 12;
    PROJECT = 13;
    REQUIREMENT_STATUS = 14;
    MANUFACTURING_TASK_AND_ROUTING_STATUS = 15;
    MARKETING_CAMPAIGN = 16;
    INVOICE_STATUS = 17;
    TASK = 18;
    WORKLOAD = 19;
    PROJECT_ASSIGNMENT = 20;
    SPRINT_STATUS = 21;
    PICKLIST_ITEM = 22;
    INVENTORY_TRANSFER = 23;
    SCRUM_TASK = 24;
    EXAMPLE = 25;
    EVENT = 26;
    NOT_APPLICABLE = 27;
    PAYMENT_PREFERENCE = 28;
    FIXED_ASSET_MAINTENANCE = 29;
    SCRUM_PROJECT_STATUS = 30;
    BUDGET = 31;
    WORK_EFFORT_REVIEW = 32;
    ORDER_RETURN_STATUS_FOR_CUSTOMER_RETURNS = 33;
    PICKLIST = 34;
    PAYMENT_STATUS = 35;
    COMMUNICATION_EVENT_ROLE = 36;
    ALLOCATION_PLAN_ITEM_STATUS = 37;
    FINANCIAL_ACCOUNT_TRANS_STATUS = 38;
    FINANCIAL_ACCOUNT_STATUS = 39;
    PROJECT_STATUS = 40;
    COMMUNICATION_EVENT = 41;
    SCRUM_ASSIGNMENT = 42;
    CALENDAR = 43;
    SHIPMENT_ROUTE_SEGMENT_CARRIER_SERVICE = 44;
    GL_RECONCILIATION_STATUS = 45;
    PARTY = 46;
    PROJECT_TASK = 47;
    SHIPMENT = 48;
    ORDER_ITEM = 49;
    CUSTOM_REQUEST_STATUS = 50;
    LEAD_STATUS = 51;
    NON_SERIALIZED_INVENTORY_ITEM = 52;
    ORDER = 53;
    TIMESHEET = 54;
    PARTY_INVITATION = 55;
    CONTACT_LIST_PARTY = 56;
}


enum ProductReviewEvent{
    
    PR_REVIEW_APPROVED = 0;  // Review Approved
    PR_REVIEW_DELETED = 1;  // Review Deleted
}

enum ProductReviewState{
    
//	ProductReview: PRR_PENDING
//	├── Review Approved: Approved
//	└── Review Deleted: Deleted

    PRR_PENDING = 0;
    
//	ProductReview: PRR_APPROVED
//	└── Review Deleted: Deleted

    PRR_APPROVED = 1;
    
//	ProductReview: PRR_DELETED

    PRR_DELETED = 2;
    
}

// service ProductReviewProcessor{
//  rpc ReviewDeleted(routines.StateProposal) returns (routines.Response) {}
//  rpc ReviewApproved(routines.StateProposal) returns (routines.Response) {}
// }

enum PurchaseShipmentEvent{
    
    PS_SHIP = 0;  // Ship
    PS_RECEIVE = 1;  // Receive
}

enum PurchaseShipmentState{
    
//	PurchaseShipment: PURCH_SHIP_CREATED
//	├── Receive: Received
//	└── Ship: Shipped

    PURCH_SHIP_CREATED = 0;
    
//	PurchaseShipment: PURCH_SHIP_SHIPPED
//	└── Receive: Received

    PURCH_SHIP_SHIPPED = 1;
    
//	PurchaseShipment: PURCH_SHIP_RECEIVED
//	└── Ship: Shipped

    PURCH_SHIP_RECEIVED = 2;
    
}

// service PurchaseShipmentProcessor{
//  rpc Receive(routines.StateProposal) returns (routines.Response) {}
//  rpc Ship(routines.StateProposal) returns (routines.Response) {}
// }

enum ContentEvent{
    
    CONTENT_FINAL_DRAFT_PUBLISHED = 0;  // Final draft Published
    CONTENT_REVISED_DRAFT_PUBLISHED = 1;  // Revised draft published
    CONTENT_DRAFT_REVISED = 2;  // Draft revised
    CONTENT_PUBLISHED_NOT_REVISED = 3;  // published, not revised
    CONTENT_IMAGE_PENDING = 4;  // Image Pending
    CONTENT_AVAILABLE_TO_DEACTIVATED = 5;  // Available to Deactivated
    CONTENT_FINAL_DRAFT = 6;  // Final draft
    CONTENT_DEACTIVATED = 7;  // Deactivated
    CONTENT_AVAILABLE = 8;  // Available
    CONTENT_FIRST_DRAFT = 9;  // First draft
    CONTENT_INITIAL_DRAFT_PUBLISHED = 10;  // Initial draft published
}

enum ContentState{
    
//	Content: CTNT_IN_PROGRESS
//	├── First draft: Initial Draft
//	├── published, not revised: Published
//	├── Available: Available
//	└── Image Pending: Pending

    CTNT_IN_PROGRESS = 0;
    
//	Content: CTNT_INITIAL_DRAFT
//	├── Draft revised: Revised Draft
//	└── Initial draft published: Published

    CTNT_INITIAL_DRAFT = 1;
    
//	Content: CTNT_REVISED_DRAFT
//	├── Final draft: Final Draft
//	└── Revised draft published: Published

    CTNT_REVISED_DRAFT = 2;
    
//	Content: CTNT_FINAL_DRAFT
//	└── Final draft Published: Published

    CTNT_FINAL_DRAFT = 3;
    
//	Content: CTNT_PUBLISHED
//	└── Deactivated: Deactivated

    CTNT_PUBLISHED = 4;
    
//	Content: CTNT_AVAILABLE
//	└── Available to Deactivated: Deactivated

    CTNT_AVAILABLE = 5;
    
//	Content: CTNT_DEACTIVATED

    CTNT_DEACTIVATED = 6;
    
}

// service ContentProcessor{
//  rpc RevisedDraftPublished(routines.StateProposal) returns (routines.Response) {}
//  rpc FinalDraftPublished(routines.StateProposal) returns (routines.Response) {}
//  rpc PublishedNotRevised(routines.StateProposal) returns (routines.Response) {}
//  rpc InitialDraftPublished(routines.StateProposal) returns (routines.Response) {}
//  rpc Deactivated(routines.StateProposal) returns (routines.Response) {}
//  rpc ImagePending(routines.StateProposal) returns (routines.Response) {}
//  rpc FinalDraft(routines.StateProposal) returns (routines.Response) {}
//  rpc Available(routines.StateProposal) returns (routines.Response) {}
//  rpc DraftRevised(routines.StateProposal) returns (routines.Response) {}
//  rpc AvailableToDeactivated(routines.StateProposal) returns (routines.Response) {}
//  rpc FirstDraft(routines.StateProposal) returns (routines.Response) {}
// }

enum KeywordEvent{
    
    KEYWORD_REVIEW_DISAPPROVED = 0;  // Review Disapproved
    KEYWORD_REVIEW_APPROVED = 1;  // Review Approved
}

enum KeywordState{
    
//	Keyword: KW_APPROVED

    KW_APPROVED = 0;
    
//	Keyword: KW_PENDING
//	├── Review Approved: Approved
//	└── Review Disapproved: Disapproved

    KW_PENDING = 1;
    
//	Keyword: KW_DISAPPROVED

    KW_DISAPPROVED = 2;
    
}

// service KeywordProcessor{
//  rpc ReviewDisapproved(routines.StateProposal) returns (routines.Response) {}
//  rpc ReviewApproved(routines.StateProposal) returns (routines.Response) {}
// }

enum SerializedInventoryItemEvent{
    
    SII_TRANSFER_COMPLETE = 0;  // Transfer Complete
    SII_RELEASE_HOLD = 1;  // Release Hold
    SII_CANCEL_PROMISE = 2;  // Cancel Promise
    SII_BEING_TRANSFERED = 3;  // Being Transfered
    SII_MAKE_RETURN_HELD = 4;  // Make Return Held
    SII_MARK_AS_DEFECTIVE = 5;  // Mark As Defective
    SII_DEACTIVATE = 6;  // Deactivate
    SII_PROMISE = 7;  // Promise
    SII_HOLD_INACTIVE = 8;  // Hold Inactive
    SII_BEING_TRANSFERED_PROMISED = 9;  // Being Transfered (Promised)
    SII_MARK_RETURN_DEFECTIVE = 10;  // Mark Return Defective
    SII_RETURN_STATUS_PENDING = 11;  // Return Status Pending
    SII_ORDER_ARRIVED = 12;  // Order Arrived
    SII_TRANSFER_COMPLETE_PROMISED = 13;  // Transfer Complete (Promised)
    SII_MAKE_RETURN_AVAILABLE = 14;  // Make Return Available
    SII_DELIVER = 15;  // Deliver
    SII_MARK_HELD_DEFECTIVE = 16;  // Mark Held Defective
    SII_RETURN_INACTIVE = 17;  // Return Inactive
    SII_HOLD = 18;  // Hold
    SII_ACTIVATE = 19;  // Activate
}

enum SerializedInventoryItemState{
    
//	SerializedInventoryItem: INV_ON_ORDER
//	└── Order Arrived: Available

    INV_ON_ORDER = 0;
    
//	SerializedInventoryItem: INV_AVAILABLE
//	├── Promise: Promised
//	├── Hold: On Hold
//	├── Mark As Defective: Defective
//	└── Being Transfered: Being Transfered

    INV_AVAILABLE = 1;
    
//	SerializedInventoryItem: INV_PROMISED
//	├── Cancel Promise: Available
//	├── Deliver: Delivered
//	├── Mark As Defective: Defective
//	└── Being Transfered (Promised): Being Transfered (Promised)

    INV_PROMISED = 2;
    
//	SerializedInventoryItem: INV_DELIVERED
//	├── Return Status Pending: Returned
//	└── Activate: Activated

    INV_DELIVERED = 3;
    
//	SerializedInventoryItem: INV_ACTIVATED
//	├── Deactivate: Deactivated
//	└── Return Status Pending: Returned

    INV_ACTIVATED = 4;
    
//	SerializedInventoryItem: INV_DEACTIVATED
//	├── Hold Inactive: On Hold
//	└── Return Inactive: Returned

    INV_DEACTIVATED = 5;
    
//	SerializedInventoryItem: INV_ON_HOLD
//	├── Release Hold: Available
//	└── Mark Held Defective: Defective

    INV_ON_HOLD = 6;
    
//	SerializedInventoryItem: INV_BEING_TRANSFERED
//	└── Transfer Complete: Available

    INV_BEING_TRANSFERED = 7;
    
//	SerializedInventoryItem: INV_BEING_TRANS_PRM
//	└── Transfer Complete (Promised): Promised

    INV_BEING_TRANS_PRM = 8;
    
//	SerializedInventoryItem: INV_RETURNED
//	├── Make Return Available: Available
//	├── Make Return Held: On Hold
//	└── Mark Return Defective: Defective

    INV_RETURNED = 9;
    
//	SerializedInventoryItem: INV_DEFECTIVE

    INV_DEFECTIVE = 10;
    
}

// service SerializedInventoryItemProcessor{
//  rpc Deliver(routines.StateProposal) returns (routines.Response) {}
//  rpc TransferCompletePromised(routines.StateProposal) returns (routines.Response) {}
//  rpc HoldInactive(routines.StateProposal) returns (routines.Response) {}
//  rpc TransferComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc MakeReturnHeld(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkHeldDefective(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkReturnDefective(routines.StateProposal) returns (routines.Response) {}
//  rpc OrderArrived(routines.StateProposal) returns (routines.Response) {}
//  rpc BeingTransfered(routines.StateProposal) returns (routines.Response) {}
//  rpc MakeReturnAvailable(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelPromise(routines.StateProposal) returns (routines.Response) {}
//  rpc Promise(routines.StateProposal) returns (routines.Response) {}
//  rpc ReturnStatusPending(routines.StateProposal) returns (routines.Response) {}
//  rpc ReturnInactive(routines.StateProposal) returns (routines.Response) {}
//  rpc Activate(routines.StateProposal) returns (routines.Response) {}
//  rpc Deactivate(routines.StateProposal) returns (routines.Response) {}
//  rpc BeingTransferedPromised(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkAsDefective(routines.StateProposal) returns (routines.Response) {}
//  rpc ReleaseHold(routines.StateProposal) returns (routines.Response) {}
//  rpc Hold(routines.StateProposal) returns (routines.Response) {}
// }

enum AllocationPlanStatusEvent{
    
    APS_CANCEL = 0;  // Cancel
    APS_APPROVE = 1;  // Approve
    APS_CREATE = 2;  // Create
    APS_COMPLETE = 3;  // Complete
}

enum AllocationPlanStatusState{
    
//	AllocationPlanStatus: ALLOC_PLAN_CREATED
//	├── Approve: Approved
//	└── Cancel: Cancelled

    ALLOC_PLAN_CREATED = 0;
    
//	AllocationPlanStatus: ALLOC_PLAN_APPROVED
//	├── Create: Created
//	├── Complete: Completed
//	└── Cancel: Cancelled

    ALLOC_PLAN_APPROVED = 1;
    
//	AllocationPlanStatus: ALLOC_PLAN_COMPLETED

    ALLOC_PLAN_COMPLETED = 2;
    
//	AllocationPlanStatus: ALLOC_PLAN_CANCELLED

    ALLOC_PLAN_CANCELLED = 3;
    
}

// service AllocationPlanStatusProcessor{
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Create(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
// }

enum QuoteStatusEvent{
    
    QS_ACCEPT_QUOTE = 0;  // Accept Quote
    QS_ORDER_QUOTE = 1;  // Order Quote
    QS_REJECT_QUOTE = 2;  // Reject Quote
}

enum QuoteStatusState{
    
//	QuoteStatus: QUO_CREATED
//	├── Accept Quote: Approved
//	└── Reject Quote: Rejected

    QUO_CREATED = 0;
    
//	QuoteStatus: QUO_APPROVED
//	├── Order Quote: Ordered
//	└── Reject Quote: Rejected

    QUO_APPROVED = 1;
    
//	QuoteStatus: QUO_ORDERED

    QUO_ORDERED = 2;
    
//	QuoteStatus: QUO_REJECTED

    QUO_REJECTED = 3;
    
}

// service QuoteStatusProcessor{
//  rpc RejectQuote(routines.StateProposal) returns (routines.Response) {}
//  rpc AcceptQuote(routines.StateProposal) returns (routines.Response) {}
//  rpc OrderQuote(routines.StateProposal) returns (routines.Response) {}
// }

enum OrderDeliveryScheduleEvent{
    
    ODS_APPROVE_DELIVERY_SCHEDULE = 0;  // Approve Delivery Schedule
    ODS_ACCEPT_DELIVERY_INFORMATION = 1;  // Accept Delivery Information
    ODS_ARRANGE_DELIVERY = 2;  // Arrange Delivery
    ODS_CANCEL_DELIVERY = 3;  // Cancel Delivery
}

enum OrderDeliveryScheduleState{
    
//	OrderDeliverySchedule: ODS_SUBMITTED
//	├── Accept Delivery Information: Accepted
//	└── Cancel Delivery: Delivery Cancelled

    ODS_SUBMITTED = 0;
    
//	OrderDeliverySchedule: ODS_ACCEPTED
//	├── Approve Delivery Schedule: Schedule Approved
//	└── Cancel Delivery: Delivery Cancelled

    ODS_ACCEPTED = 1;
    
//	OrderDeliverySchedule: ODS_APPROVED
//	├── Arrange Delivery: Delivery Arranged
//	└── Cancel Delivery: Delivery Cancelled

    ODS_APPROVED = 2;
    
//	OrderDeliverySchedule: ODS_ARRANGED
//	└── Cancel Delivery: Delivery Cancelled

    ODS_ARRANGED = 3;
    
//	OrderDeliverySchedule: ODS_CANCELLED

    ODS_CANCELLED = 4;
    
}

// service OrderDeliveryScheduleProcessor{
//  rpc AcceptDeliveryInformation(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelDelivery(routines.StateProposal) returns (routines.Response) {}
//  rpc ArrangeDelivery(routines.StateProposal) returns (routines.Response) {}
//  rpc ApproveDeliverySchedule(routines.StateProposal) returns (routines.Response) {}
// }

enum ProductStatusEvent{
    
    PS_PRODUCT_COMPLETE = 0;  // Product Complete
}

enum ProductStatusState{
    
//	ProductStatus: PRODUCT_ACTIVE
//	└── Product Complete: Closed

    PRODUCT_ACTIVE = 0;
    
//	ProductStatus: PRODUCT_CLOSED

    PRODUCT_CLOSED = 1;
    
}

// service ProductStatusProcessor{
//  rpc ProductComplete(routines.StateProposal) returns (routines.Response) {}
// }

enum PartyRelationshipEvent{
    
    PR_EXPIRED = 0;  // Expired
}

enum PartyRelationshipState{
    
//	PartyRelationship: PARTYREL_CREATED
//	└── Expired: Expired

    PARTYREL_CREATED = 0;
    
//	PartyRelationship: PARTYREL_EXPIRED

    PARTYREL_EXPIRED = 1;
    
}

// service PartyRelationshipProcessor{
//  rpc Expired(routines.StateProposal) returns (routines.Response) {}
// }

enum OrderReturnStatusForSupplierReturnsEvent{
    
    ORSFSR_ACCEPTED_RETURN_SHIPPED = 0;  // Accepted Return Shipped
    ORSFSR_REQUESTED_RETURN_CANCELLED = 1;  // Requested Return Cancelled
    ORSFSR_ACCEPTED_RETURN_CANCELLED = 2;  // Accepted Return Cancelled
    ORSFSR_SHIPPED_RETURN_COMPLETED = 3;  // Shipped Return Completed
    ORSFSR_REQUESTED_RETURN_ACCEPTED = 4;  // Requested Return Accepted
    ORSFSR_SHIPPED_RETURN_CANCELLED = 5;  // Shipped Return Cancelled
}

enum OrderReturnStatusForSupplierReturnsState{
    
//	OrderReturnStatusForSupplierReturns: SUP_RETURN_REQUESTED
//	├── Requested Return Accepted: Accepted
//	└── Requested Return Cancelled: Cancelled

    SUP_RETURN_REQUESTED = 0;
    
//	OrderReturnStatusForSupplierReturns: SUP_RETURN_ACCEPTED
//	├── Accepted Return Shipped: Shipped
//	└── Accepted Return Cancelled: Cancelled

    SUP_RETURN_ACCEPTED = 1;
    
//	OrderReturnStatusForSupplierReturns: SUP_RETURN_SHIPPED
//	├── Shipped Return Completed: Completed
//	└── Shipped Return Cancelled: Cancelled

    SUP_RETURN_SHIPPED = 2;
    
//	OrderReturnStatusForSupplierReturns: SUP_RETURN_COMPLETED

    SUP_RETURN_COMPLETED = 3;
    
//	OrderReturnStatusForSupplierReturns: SUP_RETURN_CANCELLED

    SUP_RETURN_CANCELLED = 4;
    
}

// service OrderReturnStatusForSupplierReturnsProcessor{
//  rpc AcceptedReturnShipped(routines.StateProposal) returns (routines.Response) {}
//  rpc RequestedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc AcceptedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc ShippedReturnCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc RequestedReturnAccepted(routines.StateProposal) returns (routines.Response) {}
//  rpc ShippedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
// }

enum ProductionRunStatusEvent{
    
    PRS_CLOSE = 0;  // Close
    PRS_START = 1;  // Start
    PRS_CONFIRM = 2;  // Confirm
    PRS_CANCEL = 3;  // Cancel
    PRS_SCHEDULE = 4;  // Schedule
    PRS_COMPLETE = 5;  // Complete
}

enum ProductionRunStatusState{
    
//	ProductionRunStatus: PRUN_CREATED
//	├── Confirm: Confirmed
//	├── Schedule: Scheduled
//	├── Start: Running
//	└── Cancel: Cancelled

    PRUN_CREATED = 0;
    
//	ProductionRunStatus: PRUN_SCHEDULED
//	├── Confirm: Confirmed
//	├── Start: Running
//	└── Cancel: Cancelled

    PRUN_SCHEDULED = 1;
    
//	ProductionRunStatus: PRUN_DOC_PRINTED
//	└── Start: Running

    PRUN_DOC_PRINTED = 2;
    
//	ProductionRunStatus: PRUN_RUNNING
//	└── Complete: Completed

    PRUN_RUNNING = 3;
    
//	ProductionRunStatus: PRUN_COMPLETED
//	└── Close: Closed

    PRUN_COMPLETED = 4;
    
//	ProductionRunStatus: PRUN_CLOSED

    PRUN_CLOSED = 5;
    
//	ProductionRunStatus: PRUN_CANCELLED

    PRUN_CANCELLED = 6;
    
}

// service ProductionRunStatusProcessor{
//  rpc Start(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc Schedule(routines.StateProposal) returns (routines.Response) {}
//  rpc Confirm(routines.StateProposal) returns (routines.Response) {}
//  rpc Close(routines.StateProposal) returns (routines.Response) {}
// }

enum ProjectEvent{
    
    PROJECT_BEGIN_PROJECT = 0;  // Begin Project
    PROJECT_RESUME_PROJECT = 1;  // Resume Project
    PROJECT_CANCEL = 2;  // Cancel
}

enum ProjectState{
    
//	Project: WEPR_PLANNING
//	└── Begin Project: In Progress

    WEPR_PLANNING = 0;
    
//	Project: WEPR_IN_PROGRESS
//	├── Begin Project: On Hold
//	└── Cancel: Cancelled

    WEPR_IN_PROGRESS = 1;
    
//	Project: WEPR_COMPLETE

    WEPR_COMPLETE = 2;
    
//	Project: WEPR_ON_HOLD
//	├── Resume Project: In Progress
//	└── Cancel: Cancelled

    WEPR_ON_HOLD = 3;
    
//	Project: WEPR_CANCELLED

    WEPR_CANCELLED = 4;
    
}

// service ProjectProcessor{
//  rpc ResumeProject(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc BeginProject(routines.StateProposal) returns (routines.Response) {}
// }

enum RequirementStatusEvent{
    
    RS_ACCEPT_REQUIREMENT = 0;  // Accept Requirement
    RS_ORDER_REQUIREMENT = 1;  // Order Requirement
    RS_REJECT_REQUIREMENT = 2;  // Reject Requirement
}

enum RequirementStatusState{
    
//	RequirementStatus: REQ_PROPOSED
//	├── Accept Requirement: Approved
//	└── Reject Requirement: Rejected

    REQ_PROPOSED = 0;
    
//	RequirementStatus: REQ_CREATED
//	├── Accept Requirement: Approved
//	└── Reject Requirement: Rejected

    REQ_CREATED = 1;
    
//	RequirementStatus: REQ_APPROVED
//	├── Order Requirement: Ordered
//	└── Reject Requirement: Rejected

    REQ_APPROVED = 2;
    
//	RequirementStatus: REQ_ORDERED

    REQ_ORDERED = 3;
    
//	RequirementStatus: REQ_REJECTED

    REQ_REJECTED = 4;
    
}

// service RequirementStatusProcessor{
//  rpc AcceptRequirement(routines.StateProposal) returns (routines.Response) {}
//  rpc RejectRequirement(routines.StateProposal) returns (routines.Response) {}
//  rpc OrderRequirement(routines.StateProposal) returns (routines.Response) {}
// }

enum ManufacturingTaskAndRoutingStatusEvent{
    
    MTARS_ACTIVE = 0;  // Active
    MTARS_INACTIVE = 1;  // Inactive
}

enum ManufacturingTaskAndRoutingStatusState{
    
//	ManufacturingTaskAndRoutingStatus: ROU_ACTIVE
//	└── Inactive: Not well defined and unusable

    ROU_ACTIVE = 0;
    
//	ManufacturingTaskAndRoutingStatus: ROU_INACTIVE
//	└── Active: Well defined and usable

    ROU_INACTIVE = 1;
    
}

// service ManufacturingTaskAndRoutingStatusProcessor{
//  rpc Active(routines.StateProposal) returns (routines.Response) {}
//  rpc Inactive(routines.StateProposal) returns (routines.Response) {}
// }

enum MarketingCampaignEvent{
    
    MC_CANCEL_MARKETING_CAMPAIGN = 0;  // Cancel Marketing Campaign
    MC_COMPLETE_MARKETING_CAMPAIGN = 1;  // Complete Marketing Campaign
    MC_APPROVE_MARKETING_CAMPAIGN = 2;  // Approve Marketing Campaign
    MC_MARKETING_CAMPAIGN_IN_PROGRESS = 3;  // Marketing Campaign In Progress
}

enum MarketingCampaignState{
    
//	MarketingCampaign: MKTG_CAMP_PLANNED
//	├── Approve Marketing Campaign: Approved
//	└── Cancel Marketing Campaign: Cancelled

    MKTG_CAMP_PLANNED = 0;
    
//	MarketingCampaign: MKTG_CAMP_APPROVED
//	├── Marketing Campaign In Progress: In Progress
//	└── Cancel Marketing Campaign: Cancelled

    MKTG_CAMP_APPROVED = 1;
    
//	MarketingCampaign: MKTG_CAMP_INPROGRESS
//	├── Complete Marketing Campaign: Completed
//	└── Cancel Marketing Campaign: Cancelled

    MKTG_CAMP_INPROGRESS = 2;
    
//	MarketingCampaign: MKTG_CAMP_COMPLETED

    MKTG_CAMP_COMPLETED = 3;
    
//	MarketingCampaign: MKTG_CAMP_CANCELLED

    MKTG_CAMP_CANCELLED = 4;
    
}

// service MarketingCampaignProcessor{
//  rpc ApproveMarketingCampaign(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelMarketingCampaign(routines.StateProposal) returns (routines.Response) {}
//  rpc MarketingCampaignInProgress(routines.StateProposal) returns (routines.Response) {}
//  rpc CompleteMarketingCampaign(routines.StateProposal) returns (routines.Response) {}
// }

enum InvoiceStatusEvent{
    
    IS_ENABLE_SALES_INVOICE_UPDATE = 0;  // Enable sales invoice update
    IS_PAY = 1;  // Pay
    IS_WRITE_OFF = 2;  // Write Off
    IS_RECEIVE = 3;  // Receive
    IS_SEND = 4;  // Send
    IS_MARK_READY = 5;  // Mark Ready
    IS_CANCEL = 6;  // Cancel
    IS_UNPAY = 7;  // Unpay
    IS_ENABLE_PURCH_INVOICE_UPDATE = 8;  // Enable purch.invoice update
    IS_MARK_RECEIVE = 9;  // Mark Receive
    IS_MARK_APPROVED = 10;  // Mark Approved
    IS_APPROVE = 11;  // Approve
}

enum InvoiceStatusState{
    
//	InvoiceStatus: INVOICE_IN_PROCESS
//	├── Mark Ready: Ready for Posting
//	├── Cancel: Cancelled
//	├── Send: Sent
//	├── Receive: Received
//	├── Approve: Approved
//	└── Receive: Received

    INVOICE_IN_PROCESS = 0;
    
//	InvoiceStatus: INVOICE_APPROVED
//	├── Send: Sent
//	├── Mark Ready: Ready for Posting
//	└── Cancel: Cancelled

    INVOICE_APPROVED = 1;
    
//	InvoiceStatus: INVOICE_SENT
//	├── Mark Approved: Approved
//	├── Mark Ready: Ready for Posting
//	├── Receive: Received
//	├── Cancel: Cancelled
//	└── Enable sales invoice update: In-Process

    INVOICE_SENT = 2;
    
//	InvoiceStatus: INVOICE_RECEIVED
//	├── Mark Receive: Ready for Posting
//	├── Cancel: Cancelled
//	├── Enable purch.invoice update: In-Process
//	└── Approve: Approved

    INVOICE_RECEIVED = 3;
    
//	InvoiceStatus: INVOICE_READY
//	├── Pay: Paid
//	├── Write Off: Write Off
//	└── Cancel: Cancelled

    INVOICE_READY = 4;
    
//	InvoiceStatus: INVOICE_PAID
//	├── Unpay: Ready for Posting
//	└── Cancel: Cancelled

    INVOICE_PAID = 5;
    
//	InvoiceStatus: INVOICE_WRITEOFF

    INVOICE_WRITEOFF = 6;
    
//	InvoiceStatus: INVOICE_CANCELLED

    INVOICE_CANCELLED = 7;
    
}

// service InvoiceStatusProcessor{
//  rpc MarkReady(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkApproved(routines.StateProposal) returns (routines.Response) {}
//  rpc EnableSalesInvoiceUpdate(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Receive(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkReceive(routines.StateProposal) returns (routines.Response) {}
//  rpc Pay(routines.StateProposal) returns (routines.Response) {}
//  rpc WriteOff(routines.StateProposal) returns (routines.Response) {}
//  rpc EnablePurchInvoiceUpdate(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
//  rpc Unpay(routines.StateProposal) returns (routines.Response) {}
//  rpc Send(routines.StateProposal) returns (routines.Response) {}
// }

enum TaskEvent{
    
    TASK_CANCEL = 0;  // Cancel
    TASK_DELEGATE = 1;  // Delegate
    TASK_COMPLETE = 2;  // Complete
}

enum TaskState{
    
//	Task: CAL_ACCEPTED
//	├── Complete: Completed
//	├── Cancel: Cancelled
//	└── Delegate: Delegated

    CAL_ACCEPTED = 0;
    
//	Task: CAL_COMPLETED

    CAL_COMPLETED = 1;
    
}

// service TaskProcessor{
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Delegate(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
// }

enum WorkloadEvent{
    
    WORKLOAD_DEFINITION_COMPLETE = 0;  // Definition Complete
    WORKLOAD_WORKLOAD_COMPLETED = 1;  // Workload Completed
    WORKLOAD_CANCEL_WORKLOAD = 2;  // Cancel Workload
    WORKLOAD_IMPLEMENTATION_COMPLETE = 3;  // Implementation Complete
    WORKLOAD_APPROVE = 4;  // Approve
    WORKLOAD_TESTING_COMPLETE = 5;  // Testing Complete
}

enum WorkloadState{
    
//	Workload: WLST_IN_DESIGN
//	├── Definition Complete: Defined
//	└── Cancel Workload: Cancelled

    WLST_IN_DESIGN = 0;
    
//	Workload: WLST_DEFINED
//	├── Approve: Approved
//	└── Cancel Workload: Cancelled

    WLST_DEFINED = 1;
    
//	Workload: WLST_APPROVED
//	├── Implementation Complete: Implemented
//	└── Cancel Workload: Cancelled

    WLST_APPROVED = 2;
    
//	Workload: WLST_IMPLEMENTED
//	├── Testing Complete: Tested
//	└── Cancel Workload: Cancelled

    WLST_IMPLEMENTED = 3;
    
//	Workload: WLST_TESTED
//	├── Workload Completed: Complete
//	└── Cancel Workload: Cancelled

    WLST_TESTED = 4;
    
//	Workload: WLST_COMPLETE

    WLST_COMPLETE = 5;
    
//	Workload: WLST_CANCELLED

    WLST_CANCELLED = 6;
    
}

// service WorkloadProcessor{
//  rpc ImplementationComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc TestingComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelWorkload(routines.StateProposal) returns (routines.Response) {}
//  rpc DefinitionComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
//  rpc WorkloadCompleted(routines.StateProposal) returns (routines.Response) {}
// }

enum ProjectAssignmentEvent{
    
    PA_ASSIGNMENT_COMPLETE = 0;  // Assignment Complete
}

enum ProjectAssignmentState{
    
//	ProjectAssignment: PAS_ASSIGNED
//	└── Assignment Complete: Completed

    PAS_ASSIGNED = 0;
    
//	ProjectAssignment: PAS_COMPLETED

    PAS_COMPLETED = 1;
    
}

// service ProjectAssignmentProcessor{
//  rpc AssignmentComplete(routines.StateProposal) returns (routines.Response) {}
// }

enum SprintStatusEvent{
    
    SS_PRODUCT_COMPLETE_WITH_SPRINT_ACTIVE = 0;  // Product Complete with sprint active
    SS_SPRINT_COMPLETE = 1;  // Sprint Complete
    SS_PROJECT_RE_OPEN_WITH_SPRINT_OPEN = 2;  // Project Re-Open with Sprint Open
    SS_PRODUCT_COMPLETE_WITH_SPRINT_CLOSE = 3;  // Product Complete with sprint close
}

enum SprintStatusState{
    
//	SprintStatus: SPRINT_ACTIVE
//	├── Sprint Complete: Closed
//	└── Product Complete with sprint active: Closed

    SPRINT_ACTIVE = 0;
    
//	SprintStatus: SPRINT_CLOSED
//	├── Project Re-Open with Sprint Open: Active
//	└── Product Complete with sprint close: Closed

    SPRINT_CLOSED = 1;
    
}

// service SprintStatusProcessor{
//  rpc ProductCompleteWithSprintActive(routines.StateProposal) returns (routines.Response) {}
//  rpc ProductCompleteWithSprintClose(routines.StateProposal) returns (routines.Response) {}
//  rpc SprintComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc ProjectReOpenWithSprintOpen(routines.StateProposal) returns (routines.Response) {}
// }

enum PicklistItemEvent{
    
    PI_CANCEL = 0;  // Cancel
    PI_COMPLETE = 1;  // Complete
}

enum PicklistItemState{
    
//	PicklistItem: PICKITEM_PENDING
//	├── Complete: Completed
//	└── Cancel: Cancelled

    PICKITEM_PENDING = 0;
    
//	PicklistItem: PICKITEM_COMPLETED

    PICKITEM_COMPLETED = 1;
    
//	PicklistItem: PICKITEM_CANCELLED

    PICKITEM_CANCELLED = 2;
    
}

// service PicklistItemProcessor{
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
// }

enum InventoryTransferEvent{
    
    IT_INVENTORY_REQUEST_SCHEDULED = 0;  // Inventory Request Scheduled
    IT_SCHEDULED_INVENTORY_IN_ROUTE = 1;  // Scheduled Inventory In Route
    IT_IN_ROUTE_TRANSFER_COMPLETED = 2;  // In Route Transfer Completed
    IT_INVENTORY_REQUEST_IN_ROUTE = 3;  // Inventory Request In Route
    IT_SCHEDULED_INVENTORY_COMPLETED = 4;  // Scheduled Inventory Completed
    IT_INVENTORY_REQUEST_CANCELLED = 5;  // Inventory Request Cancelled
    IT_INVENTORY_REQUEST_COMPLETED = 6;  // Inventory Request Completed
    IT_SCHEDULED_INVENTORY_CANCELLED = 7;  // Scheduled Inventory Cancelled
}

enum InventoryTransferState{
    
//	InventoryTransfer: IXF_REQUESTED
//	├── Inventory Request Scheduled: Scheduled
//	├── Inventory Request In Route: En-Route
//	├── Inventory Request Completed: Complete
//	└── Inventory Request Cancelled: Cancelled

    IXF_REQUESTED = 0;
    
//	InventoryTransfer: IXF_SCHEDULED
//	├── Scheduled Inventory In Route: En-Route
//	├── Scheduled Inventory Completed: Complete
//	└── Scheduled Inventory Cancelled: Cancelled

    IXF_SCHEDULED = 1;
    
//	InventoryTransfer: IXF_EN_ROUTE
//	└── In Route Transfer Completed: Complete

    IXF_EN_ROUTE = 2;
    
//	InventoryTransfer: IXF_COMPLETE

    IXF_COMPLETE = 3;
    
//	InventoryTransfer: IXF_CANCELLED

    IXF_CANCELLED = 4;
    
}

// service InventoryTransferProcessor{
//  rpc InventoryRequestScheduled(routines.StateProposal) returns (routines.Response) {}
//  rpc ScheduledInventoryInRoute(routines.StateProposal) returns (routines.Response) {}
//  rpc InRouteTransferCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc InventoryRequestInRoute(routines.StateProposal) returns (routines.Response) {}
//  rpc InventoryRequestCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc InventoryRequestCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc ScheduledInventoryCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc ScheduledInventoryCancelled(routines.StateProposal) returns (routines.Response) {}
// }

enum ScrumTaskEvent{
    
    ST_TASK_RE_OPEN = 0;  // Task Re-Open
    ST_ACTIVATED = 1;  // Activated
    ST_TASK_ON_HOLD = 2;  // Task On Hold
    ST_TASK_COMPLETE_WITH_PROJECT_COMPLETE = 3;  // Task Complete with Project Complete
    ST_TASK_COMPLETE = 4;  // Task Complete
}

enum ScrumTaskState{
    
//	ScrumTask: STS_CREATED
//	├── Task Complete: Completed
//	├── Task On Hold: On Hold
//	├── Task On Hold: Cancelled
//	└── Task Complete with Project Complete: Closed

    STS_CREATED = 0;
    
//	ScrumTask: STS_CREATED_UA

    STS_CREATED_UA = 1;
    
//	ScrumTask: STS_CREATED_AS

    STS_CREATED_AS = 2;
    
//	ScrumTask: STS_CREATED_IP

    STS_CREATED_IP = 3;
    
//	ScrumTask: STS_COMPLETED
//	└── Task Re-Open: Created

    STS_COMPLETED = 4;
    
//	ScrumTask: STS_ON_HOLD
//	└── Activated: Created

    STS_ON_HOLD = 5;
    
//	ScrumTask: STS_CANCELLED

    STS_CANCELLED = 6;
    
}

// service ScrumTaskProcessor{
//  rpc Activated(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskCompleteWithProjectComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskReOpen(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskOnHold(routines.StateProposal) returns (routines.Response) {}
// }

enum ExampleEvent{
    
    EXAMPLE_DEFINITION_COMPLETE = 0;  // Definition Complete
    EXAMPLE_IMPLEMENTATION_COMPLETE = 1;  // Implementation Complete
    EXAMPLE_EXAMPLE_COMPLETED = 2;  // Example Completed
    EXAMPLE_CANCEL_EXAMPLE = 3;  // Cancel Example
    EXAMPLE_APPROVE = 4;  // Approve
    EXAMPLE_TESTING_COMPLETE = 5;  // Testing Complete
}

enum ExampleState{
    
//	Example: EXST_IN_DESIGN
//	├── Definition Complete: Defined
//	├── Cancel Example: Cancelled
//	├── Definition Complete: Defined
//	└── Cancel Example: Cancelled

    EXST_IN_DESIGN = 0;
    
//	Example: EXST_DEFINED
//	├── Approve: Approved
//	├── Cancel Example: Cancelled
//	├── Approve: Approved
//	└── Cancel Example: Cancelled

    EXST_DEFINED = 1;
    
//	Example: EXST_APPROVED
//	├── Implementation Complete: Implemented
//	├── Cancel Example: Cancelled
//	├── Implementation Complete: Implemented
//	└── Cancel Example: Cancelled

    EXST_APPROVED = 2;
    
//	Example: EXST_IMPLEMENTED
//	├── Testing Complete: Tested
//	├── Cancel Example: Cancelled
//	├── Testing Complete: Tested
//	└── Cancel Example: Cancelled

    EXST_IMPLEMENTED = 3;
    
//	Example: EXST_TESTED
//	├── Example Completed: Complete
//	├── Cancel Example: Cancelled
//	├── Example Completed: Complete
//	└── Cancel Example: Cancelled

    EXST_TESTED = 4;
    
//	Example: EXST_COMPLETE

    EXST_COMPLETE = 5;
    
//	Example: EXST_CANCELLED

    EXST_CANCELLED = 6;
    
}

// service ExampleProcessor{
//  rpc CancelExample(routines.StateProposal) returns (routines.Response) {}
//  rpc ImplementationComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc TestingComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc DefinitionComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
//  rpc ExampleCompleted(routines.StateProposal) returns (routines.Response) {}
// }

enum EventEvent{
    
    EVENT_CONFIRM = 0;  // Confirm
    EVENT_DECLINE = 1;  // Decline
    EVENT_CANCEL = 2;  // Cancel
    EVENT_ACCEPT = 3;  // Accept
    EVENT_DELEGATE = 4;  // Delegate
    EVENT_COMPLETE = 5;  // Complete
}

enum EventState{
    
//	Event: CAL_TENTATIVE
//	├── Accept: Accepted
//	├── Decline: Declined
//	├── Delegate: Delegated
//	├── Cancel: Cancelled
//	└── Confirm: Confirmed

    CAL_TENTATIVE = 0;
    
//	Event: CAL_CONFIRMED
//	└── Complete: Completed

    CAL_CONFIRMED = 1;
    
}

// service EventProcessor{
//  rpc Decline(routines.StateProposal) returns (routines.Response) {}
//  rpc Accept(routines.StateProposal) returns (routines.Response) {}
//  rpc Delegate(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc Confirm(routines.StateProposal) returns (routines.Response) {}
// }

enum NotApplicableEvent{
    
    NA_CLOSE_PROJECT = 0;  // Close project
}

enum NotApplicableState{
    
//	NotApplicable: _NA_
//	├── Close project: Closed
//	└── Close project: Closed

    _NA_ = 0;
    
}

// service NotApplicableProcessor{
//  rpc CloseProject(routines.StateProposal) returns (routines.Response) {}
// }

enum PaymentPreferenceEvent{
    
    PP_PAYMENT_AUTHORIZED = 0;  // Payment Authorized
    PP_PAYMENT_RECEIVED = 1;  // Payment Received
    PP_PAYMENT_CANCELLED = 2;  // Payment Cancelled
    PP_PAYMENT_REFUNDED = 3;  // Payment Refunded
    PP_PAYMENT_SETTLED = 4;  // Payment Settled
}

enum PaymentPreferenceState{
    
//	PaymentPreference: PAYMENT_NOT_RECEIVED
//	├── Payment Received: Received
//	└── Payment Cancelled: Cancelled

    PAYMENT_NOT_RECEIVED = 0;
    
//	PaymentPreference: PAYMENT_NOT_AUTH
//	├── Payment Authorized: Authorized
//	└── Payment Cancelled: Cancelled

    PAYMENT_NOT_AUTH = 1;
    
//	PaymentPreference: PAYMENT_RECEIVED

    PAYMENT_RECEIVED = 2;
    
//	PaymentPreference: PAYMENT_AUTHORIZED
//	├── Payment Settled: Settled
//	└── Payment Cancelled: Cancelled

    PAYMENT_AUTHORIZED = 3;
    
//	PaymentPreference: PAYMENT_SETTLED
//	└── Payment Refunded: Refunded

    PAYMENT_SETTLED = 4;
    
//	PaymentPreference: PAYMENT_DECLINED

    PAYMENT_DECLINED = 5;
    
//	PaymentPreference: PAYMENT_REFUNDED

    PAYMENT_REFUNDED = 6;
    
//	PaymentPreference: PAYMENT_CANCELLED

    PAYMENT_CANCELLED = 7;
    
}

// service PaymentPreferenceProcessor{
//  rpc PaymentRefunded(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentAuthorized(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentReceived(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentSettled(routines.StateProposal) returns (routines.Response) {}
// }

enum FixedAssetMaintenanceEvent{
    
    FAM_CREATED_MAINTENANCE_SCHEDULED = 0;  // Created Maintenance Scheduled
    FAM_IN_PROCESS_MAINTENANCE_COMPLETED = 1;  // In-Process Maintenance Completed
    FAM_CREATED_MAINTENACE_CANCELLED = 2;  // Created Maintenace Cancelled
    FAM_CREATED_MAINTENANCE_IN_PROCESS = 3;  // Created Maintenance In-Process
    FAM_SCHEDULED_MAINTENACE_CANCELLED = 4;  // Scheduled Maintenace Cancelled
    FAM_SCHEDULED_MAINTENACE_IN_PROCESS = 5;  // Scheduled Maintenace In-Process
}

enum FixedAssetMaintenanceState{
    
//	FixedAssetMaintenance: FAM_CREATED
//	├── Created Maintenance Scheduled: Scheduled
//	├── Created Maintenance In-Process: In Process
//	└── Created Maintenace Cancelled: Cancelled

    FAM_CREATED = 0;
    
//	FixedAssetMaintenance: FAM_SCHEDULED
//	├── Scheduled Maintenace In-Process: In Process
//	└── Scheduled Maintenace Cancelled: Cancelled

    FAM_SCHEDULED = 1;
    
//	FixedAssetMaintenance: FAM_IN_PROCESS
//	└── In-Process Maintenance Completed: Completed

    FAM_IN_PROCESS = 2;
    
//	FixedAssetMaintenance: FAM_COMPLETED

    FAM_COMPLETED = 3;
    
//	FixedAssetMaintenance: FAM_CANCELLED

    FAM_CANCELLED = 4;
    
}

// service FixedAssetMaintenanceProcessor{
//  rpc ScheduledMaintenaceCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc CreatedMaintenaceCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc ScheduledMaintenaceInProcess(routines.StateProposal) returns (routines.Response) {}
//  rpc CreatedMaintenanceScheduled(routines.StateProposal) returns (routines.Response) {}
//  rpc CreatedMaintenanceInProcess(routines.StateProposal) returns (routines.Response) {}
//  rpc InProcessMaintenanceCompleted(routines.StateProposal) returns (routines.Response) {}
// }

enum ScrumProjectStatusEvent{
    
    SPS_RE_OPEN_PROJECT = 0;  // Re-Open project
    SPS_CLOSE_PROJECT = 1;  // Close project
}

enum ScrumProjectStatusState{
    
//	ScrumProjectStatus: SPJ_ACTIVE
//	└── Close project: Closed

    SPJ_ACTIVE = 0;
    
//	ScrumProjectStatus: SPJ_CLOSED
//	└── Re-Open project: Active

    SPJ_CLOSED = 1;
    
}

// service ScrumProjectStatusProcessor{
//  rpc ReOpenProject(routines.StateProposal) returns (routines.Response) {}
//  rpc CloseProject(routines.StateProposal) returns (routines.Response) {}
// }

enum BudgetEvent{
    
    BUDGET_REVIEW_BUDGET = 0;  // Review Budget
    BUDGET_APPROVED_BUDGET = 1;  // Approved Budget
    BUDGET_REJECT_BUDGET = 2;  // Reject Budget
    BUDGET_ACCEPT_BUDGET = 3;  // Accept Budget
    BUDGET_SUBMIT_BUDGET = 4;  // Submit Budget
}

enum BudgetState{
    
//	Budget: BG_CREATED
//	├── Review Budget: Reviewed
//	├── Submit Budget: Approved
//	└── Reject Budget: Rejected

    BG_CREATED = 0;
    
//	Budget: BG_REVIEWED
//	├── Approved Budget: Approved
//	└── Reject Budget: Rejected

    BG_REVIEWED = 1;
    
//	Budget: BG_APPROVED
//	├── Accept Budget: Created
//	└── Reject Budget: Rejected

    BG_APPROVED = 2;
    
//	Budget: BG_REJECTED

    BG_REJECTED = 3;
    
}

// service BudgetProcessor{
//  rpc SubmitBudget(routines.StateProposal) returns (routines.Response) {}
//  rpc RejectBudget(routines.StateProposal) returns (routines.Response) {}
//  rpc ReviewBudget(routines.StateProposal) returns (routines.Response) {}
//  rpc AcceptBudget(routines.StateProposal) returns (routines.Response) {}
//  rpc ApprovedBudget(routines.StateProposal) returns (routines.Response) {}
// }

enum WorkEffortReviewEvent{
    
    WER_REVIEW_APPROVED = 0;  // Review Approved
    WER_REVIEW_DELETED = 1;  // Review Deleted
}

enum WorkEffortReviewState{
    
//	WorkEffortReview: WERV_PENDING
//	├── Review Approved: Approved
//	└── Review Deleted: Deleted

    WERV_PENDING = 0;
    
//	WorkEffortReview: WERV_APPROVED
//	└── Review Deleted: Deleted

    WERV_APPROVED = 1;
    
//	WorkEffortReview: WERV_DELETED

    WERV_DELETED = 2;
    
}

// service WorkEffortReviewProcessor{
//  rpc ReviewDeleted(routines.StateProposal) returns (routines.Response) {}
//  rpc ReviewApproved(routines.StateProposal) returns (routines.Response) {}
// }

enum OrderReturnStatusForCustomerReturnsEvent{
    
    ORSFCR_RECEIVED_RETURN_REQUIRES_MANUAL_REFUND = 0;  // Received Return Requires Manual Refund
    ORSFCR_RECEIVED_RETURN_COMPLETED = 1;  // Received Return Completed
    ORSFCR_ACCEPTED_RETURN_RECEIVED = 2;  // Accepted Return Received
    ORSFCR_REQUESTED_RETURN_CANCELLED = 3;  // Requested Return Cancelled
    ORSFCR_RECEIVED_RETURN_CANCELLED = 4;  // Received Return Cancelled
    ORSFCR_ACCEPTED_RETURN_CANCELLED = 5;  // Accepted Return Cancelled
    ORSFCR_REQUESTED_RETURN_ACCEPTED = 6;  // Requested Return Accepted
}

enum OrderReturnStatusForCustomerReturnsState{
    
//	OrderReturnStatusForCustomerReturns: RETURN_REQUESTED
//	├── Requested Return Accepted: Accepted
//	└── Requested Return Cancelled: Cancelled

    RETURN_REQUESTED = 0;
    
//	OrderReturnStatusForCustomerReturns: RETURN_ACCEPTED
//	├── Accepted Return Received: Received
//	└── Accepted Return Cancelled: Cancelled

    RETURN_ACCEPTED = 1;
    
//	OrderReturnStatusForCustomerReturns: RETURN_RECEIVED
//	├── Received Return Completed: Completed
//	├── Received Return Cancelled: Cancelled
//	└── Received Return Requires Manual Refund: Manual Refund Required

    RETURN_RECEIVED = 2;
    
//	OrderReturnStatusForCustomerReturns: RETURN_COMPLETED

    RETURN_COMPLETED = 3;
    
//	OrderReturnStatusForCustomerReturns: RETURN_MAN_REFUND

    RETURN_MAN_REFUND = 4;
    
//	OrderReturnStatusForCustomerReturns: RETURN_CANCELLED

    RETURN_CANCELLED = 5;
    
}

// service OrderReturnStatusForCustomerReturnsProcessor{
//  rpc AcceptedReturnReceived(routines.StateProposal) returns (routines.Response) {}
//  rpc RequestedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc ReceivedReturnRequiresManualRefund(routines.StateProposal) returns (routines.Response) {}
//  rpc AcceptedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc RequestedReturnAccepted(routines.StateProposal) returns (routines.Response) {}
//  rpc ReceivedReturnCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc ReceivedReturnCancelled(routines.StateProposal) returns (routines.Response) {}
// }

enum PicklistEvent{
    
    PICKLIST_PRINT = 0;  // Print
    PICKLIST_CANCEL = 1;  // Cancel
    PICKLIST_PICK = 2;  // Pick
    PICKLIST_ASSIGN = 3;  // Assign
}

enum PicklistState{
    
//	Picklist: PICKLIST_INPUT
//	├── Assign: Assigned
//	├── Print: Printed
//	├── Pick: Picked
//	└── Cancel: Cancelled

    PICKLIST_INPUT = 0;
    
//	Picklist: PICKLIST_ASSIGNED
//	├── Pick: Picked
//	├── Print: Printed
//	└── Cancel: Cancelled

    PICKLIST_ASSIGNED = 1;
    
//	Picklist: PICKLIST_PRINTED
//	├── Pick: Picked
//	└── Cancel: Cancelled

    PICKLIST_PRINTED = 2;
    
//	Picklist: PICKLIST_PICKED

    PICKLIST_PICKED = 3;
    
//	Picklist: PICKLIST_CANCELLED

    PICKLIST_CANCELLED = 4;
    
}

// service PicklistProcessor{
//  rpc Print(routines.StateProposal) returns (routines.Response) {}
//  rpc Pick(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Assign(routines.StateProposal) returns (routines.Response) {}
// }

enum PaymentStatusEvent{
    
    PS_PAYMENT_NOT_PAID = 0;  // Payment Not Paid
    PS_PAYMENT_CONFIRMED = 1;  // Payment Confirmed
    PS_PAYMENT_VOIDED = 2;  // Payment Voided
    PS_PAYMENT_RECEIVED = 3;  // Payment Received
    PS_PAYMENT_CANCELLED = 4;  // Payment Cancelled
    PS_PAYMENT_CONFIRMED_TO_SENT = 5;  // Payment Confirmed to Sent
    PS_PAYMENT_SEND = 6;  // Payment Send
    PS_PAYMENT_CONFIRMED_TO_RECEIVED = 7;  // Payment Confirmed to Received
}

enum PaymentStatusState{
    
//	PaymentStatus: PMNT_NOT_PAID
//	├── Payment Send: Sent
//	├── Payment Received: Received
//	├── Payment Cancelled: Cancelled
//	└── Payment Voided: Voided

    PMNT_NOT_PAID = 0;
    
//	PaymentStatus: PMNT_SENT
//	├── Payment Confirmed: Confirmed
//	├── Payment Voided: Voided
//	└── Payment Not Paid: Not Paid

    PMNT_SENT = 1;
    
//	PaymentStatus: PMNT_RECEIVED
//	├── Payment Confirmed: Confirmed
//	├── Payment Voided: Voided
//	└── Payment Not Paid: Not Paid

    PMNT_RECEIVED = 2;
    
//	PaymentStatus: PMNT_CONFIRMED
//	├── Payment Confirmed to Sent: Sent
//	└── Payment Confirmed to Received: Received

    PMNT_CONFIRMED = 3;
    
//	PaymentStatus: PMNT_CANCELLED

    PMNT_CANCELLED = 4;
    
//	PaymentStatus: PMNT_VOID

    PMNT_VOID = 5;
    
}

// service PaymentStatusProcessor{
//  rpc PaymentConfirmedToSent(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentNotPaid(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentConfirmed(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentSend(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentVoided(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentReceived(routines.StateProposal) returns (routines.Response) {}
//  rpc PaymentConfirmedToReceived(routines.StateProposal) returns (routines.Response) {}
// }

enum CommunicationEventRoleEvent{
    
    CER_READ = 0;  // Read
    CER_COMPLETED = 1;  // Completed
}

enum CommunicationEventRoleState{
    
//	CommunicationEventRole: COM_ROLE_CREATED
//	├── Read: Read
//	└── Completed: Closed

    COM_ROLE_CREATED = 0;
    
//	CommunicationEventRole: COM_ROLE_READ
//	└── Completed: Closed

    COM_ROLE_READ = 1;
    
//	CommunicationEventRole: COM_ROLE_COMPLETED

    COM_ROLE_COMPLETED = 2;
    
}

// service CommunicationEventRoleProcessor{
//  rpc Read(routines.StateProposal) returns (routines.Response) {}
//  rpc Completed(routines.StateProposal) returns (routines.Response) {}
// }

enum AllocationPlanItemStatusEvent{
    
    APIS_CANCEL = 0;  // Cancel
    APIS_APPROVE = 1;  // Approve
    APIS_CREATE = 2;  // Create
    APIS_COMPLETE = 3;  // Complete
}

enum AllocationPlanItemStatusState{
    
//	AllocationPlanItemStatus: ALLOC_PLAN_ITEM_CRTD
//	├── Approve: Approved
//	└── Cancel: Cancelled

    ALLOC_PLAN_ITEM_CRTD = 0;
    
//	AllocationPlanItemStatus: ALLOC_PLAN_ITEM_APRV
//	├── Create: Created
//	├── Complete: Completed
//	└── Cancel: Cancelled

    ALLOC_PLAN_ITEM_APRV = 1;
    
//	AllocationPlanItemStatus: ALLOC_PLAN_ITEM_CMPL

    ALLOC_PLAN_ITEM_CMPL = 2;
    
//	AllocationPlanItemStatus: ALLOC_PLAN_ITEM_CNCL

    ALLOC_PLAN_ITEM_CNCL = 3;
    
}

// service AllocationPlanItemStatusProcessor{
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Create(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
// }

enum FinancialAccountTransStatusEvent{
    
    FATS_SET_APPROVED_TO_CANCELED = 0;  // Set Approved to Canceled
    FATS_SET_CREATED_TO_APPROVED = 1;  // Set Created to Approved
    FATS_SET_CREATED_TO_CANCELED = 2;  // Set Created to Canceled
}

enum FinancialAccountTransStatusState{
    
//	FinancialAccountTransStatus: FINACT_TRNS_APPROVED
//	└── Set Approved to Canceled: Canceled

    FINACT_TRNS_APPROVED = 0;
    
//	FinancialAccountTransStatus: FINACT_TRNS_CREATED
//	├── Set Created to Approved: Approved
//	└── Set Created to Canceled: Canceled

    FINACT_TRNS_CREATED = 1;
    
//	FinancialAccountTransStatus: FINACT_TRNS_CANCELED

    FINACT_TRNS_CANCELED = 2;
    
}

// service FinancialAccountTransStatusProcessor{
//  rpc SetApprovedToCanceled(routines.StateProposal) returns (routines.Response) {}
//  rpc SetCreatedToApproved(routines.StateProposal) returns (routines.Response) {}
//  rpc SetCreatedToCanceled(routines.StateProposal) returns (routines.Response) {}
// }

enum FinancialAccountStatusEvent{
    
    FAS_SET_MANUALLY_FROZEN = 0;  // Set Manually Frozen
    FAS_MANUALLY_FREEZE = 1;  // Manually Freeze
    FAS_CANCEL = 2;  // Cancel
    FAS_RE_ACTIVATE = 3;  // Re-activate
    FAS_SET_NEGATIVE_PENDING_REPLENISHMENT = 4;  // Set Negative Pending Replenishment
}

enum FinancialAccountStatusState{
    
//	FinancialAccountStatus: FNACT_ACTIVE
//	├── Set Negative Pending Replenishment: Negative Pending Replenishment
//	├── Set Manually Frozen: Manually Frozen
//	└── Cancel: Cancelled

    FNACT_ACTIVE = 0;
    
//	FinancialAccountStatus: FNACT_NEGPENDREPL
//	├── Re-activate: Active
//	├── Manually Freeze: Manually Frozen
//	└── Cancel: Cancelled

    FNACT_NEGPENDREPL = 1;
    
//	FinancialAccountStatus: FNACT_MANFROZEN
//	├── Re-activate: Active
//	└── Cancel: Cancelled

    FNACT_MANFROZEN = 2;
    
//	FinancialAccountStatus: FNACT_CANCELLED

    FNACT_CANCELLED = 3;
    
}

// service FinancialAccountStatusProcessor{
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc SetManuallyFrozen(routines.StateProposal) returns (routines.Response) {}
//  rpc ManuallyFreeze(routines.StateProposal) returns (routines.Response) {}
//  rpc SetNegativePendingReplenishment(routines.StateProposal) returns (routines.Response) {}
//  rpc ReActivate(routines.StateProposal) returns (routines.Response) {}
// }

enum ProjectStatusEvent{
    
    PS_CLOSE_PROJECT = 0;  // Close project
}

enum ProjectStatusState{
    
//	ProjectStatus: PRJ_ACTIVE
//	└── Close project: Closed

    PRJ_ACTIVE = 0;
    
//	ProjectStatus: PRJ_CLOSED

    PRJ_CLOSED = 1;
    
}

// service ProjectStatusProcessor{
//  rpc CloseProject(routines.StateProposal) returns (routines.Response) {}
// }

enum CommunicationEventEvent{
    
    CE_RESOLVE = 0;  // Resolve
    CE_REFER = 1;  // Refer
    CE_SET_PENDING_ONLY_VISIBLE_TO_ORIGINATOR = 2;  // Set Pending, only visible to originator
    CE_CANCEL = 3;  // Cancel
    CE_CORRECTED = 4;  // Corrected
    CE_BOUNCED = 5;  // Bounced
    CE_ENTERED_VISIBLE_TO_ALL_PARTICIPANTS = 6;  // Entered,visible to all participants
    CE_SET_IN_PROGRESS_WAITING_TO_BE_SEND = 7;  // Set In Progress, waiting to be send
    CE_COMPLETE = 8;  // Complete
}

enum CommunicationEventState{
    
//	CommunicationEvent: COM_PENDING
//	├── Entered,visible to all participants: Entered
//	├── Set In Progress, waiting to be send: In-Progress
//	├── Complete: Closed
//	└── Cancel: Cancelled

    COM_PENDING = 0;
    
//	CommunicationEvent: COM_ENTERED
//	├── Set Pending, only visible to originator: Pending
//	├── Set In Progress, waiting to be send: In-Progress
//	├── Complete: Closed
//	└── Cancel: Cancelled

    COM_ENTERED = 1;
    
//	CommunicationEvent: COM_IN_PROGRESS
//	├── Complete: Closed
//	├── Bounced: Bounced
//	└── Cancel: Cancelled

    COM_IN_PROGRESS = 2;
    
//	CommunicationEvent: COM_UNKNOWN_PARTY
//	├── Complete: Closed
//	├── Corrected: Entered
//	└── Cancel: Cancelled

    COM_UNKNOWN_PARTY = 3;
    
//	CommunicationEvent: COM_COMPLETE
//	├── Resolve: Resolved
//	├── Refer: Referred
//	├── Bounced: Bounced
//	└── Cancel: Cancelled

    COM_COMPLETE = 4;
    
//	CommunicationEvent: COM_RESOLVED
//	└── Cancel: Cancelled

    COM_RESOLVED = 5;
    
//	CommunicationEvent: COM_REFERRED
//	└── Cancel: Cancelled

    COM_REFERRED = 6;
    
//	CommunicationEvent: COM_BOUNCED

    COM_BOUNCED = 7;
    
//	CommunicationEvent: COM_CANCELLED

    COM_CANCELLED = 8;
    
}

// service CommunicationEventProcessor{
//  rpc Corrected(routines.StateProposal) returns (routines.Response) {}
//  rpc Refer(routines.StateProposal) returns (routines.Response) {}
//  rpc Bounced(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc SetPendingOnlyVisibleToOriginator(routines.StateProposal) returns (routines.Response) {}
//  rpc SetInProgressWaitingToBeSend(routines.StateProposal) returns (routines.Response) {}
//  rpc EnteredVisibleToAllParticipants(routines.StateProposal) returns (routines.Response) {}
//  rpc Resolve(routines.StateProposal) returns (routines.Response) {}
// }

enum ScrumAssignmentEvent{
    
    SA_ASSIGNMENT_COMPLETE = 0;  // Assignment Complete
}

enum ScrumAssignmentState{
    
//	ScrumAssignment: SCAS_ASSIGNED
//	└── Assignment Complete: Completed

    SCAS_ASSIGNED = 0;
    
//	ScrumAssignment: SCAS_COMPLETED

    SCAS_COMPLETED = 1;
    
}

// service ScrumAssignmentProcessor{
//  rpc AssignmentComplete(routines.StateProposal) returns (routines.Response) {}
// }

enum CalendarEvent{
    
    CALENDAR_SEND = 0;  // Send
    CALENDAR_CONFIRM = 1;  // Confirm
    CALENDAR_DECLINE = 2;  // Decline
    CALENDAR_TENTATIVELY_PLAN = 3;  // Tentatively Plan
    CALENDAR_CANCEL = 4;  // Cancel
    CALENDAR_ACCEPT = 5;  // Accept
    CALENDAR_DELEGATE = 6;  // Delegate
    CALENDAR_COMPLETE = 7;  // Complete
}

enum CalendarState{
    
//	Calendar: CAL_IN_PLANNING
//	├── Send: Planned
//	└── Send: Needs Action (Approved)

    CAL_IN_PLANNING = 0;
    
//	Calendar: CAL_PLANNED
//	└── Send: Needs Action (Approved)

    CAL_PLANNED = 1;
    
//	Calendar: CAL_NEEDS_ACTION
//	├── Send: Sent
//	├── Cancel: Cancelled
//	├── Complete: Completed
//	├── Tentatively Plan: Tentative
//	└── Confirm: Confirmed

    CAL_NEEDS_ACTION = 2;
    
//	Calendar: CAL_SENT
//	├── Decline: Declined
//	├── Delegate: Delegated
//	├── Cancel: Cancelled
//	└── Accept: Accepted

    CAL_SENT = 3;
    
//	Calendar: CAL_DECLINED

    CAL_DECLINED = 4;
    
//	Calendar: CAL_DELEGATED

    CAL_DELEGATED = 5;
    
//	Calendar: CAL_CANCELLED

    CAL_CANCELLED = 6;
    
}

// service CalendarProcessor{
//  rpc Decline(routines.StateProposal) returns (routines.Response) {}
//  rpc TentativelyPlan(routines.StateProposal) returns (routines.Response) {}
//  rpc Accept(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Delegate(routines.StateProposal) returns (routines.Response) {}
//  rpc Complete(routines.StateProposal) returns (routines.Response) {}
//  rpc Confirm(routines.StateProposal) returns (routines.Response) {}
//  rpc Send(routines.StateProposal) returns (routines.Response) {}
// }

enum ShipmentRouteSegmentCarrierServiceEvent{
    
    SRSCS_CONFIRM = 0;  // Confirm
    SRSCS_VOID = 1;  // Void
    SRSCS_ACCEPT = 2;  // Accept
}

enum ShipmentRouteSegmentCarrierServiceState{
    
//	ShipmentRouteSegmentCarrierService: SHRSCS_NOT_STARTED
//	└── Confirm: Confirmed

    SHRSCS_NOT_STARTED = 0;
    
//	ShipmentRouteSegmentCarrierService: SHRSCS_CONFIRMED
//	├── Accept: Accepted
//	└── Void: Voided

    SHRSCS_CONFIRMED = 1;
    
//	ShipmentRouteSegmentCarrierService: SHRSCS_ACCEPTED
//	└── Void: Voided

    SHRSCS_ACCEPTED = 2;
    
//	ShipmentRouteSegmentCarrierService: SHRSCS_VOIDED

    SHRSCS_VOIDED = 3;
    
}

// service ShipmentRouteSegmentCarrierServiceProcessor{
//  rpc Accept(routines.StateProposal) returns (routines.Response) {}
//  rpc Confirm(routines.StateProposal) returns (routines.Response) {}
//  rpc Void(routines.StateProposal) returns (routines.Response) {}
// }

enum GlReconciliationStatusEvent{
    
    GRS_SET_CREATED_TO_RECONCILED = 0;  // Set Created to Reconciled
}

enum GlReconciliationStatusState{
    
//	GlReconciliationStatus: GLREC_CREATED
//	└── Set Created to Reconciled: Reconciled

    GLREC_CREATED = 0;
    
//	GlReconciliationStatus: GLREC_RECONCILED

    GLREC_RECONCILED = 1;
    
}

// service GlReconciliationStatusProcessor{
//  rpc SetCreatedToReconciled(routines.StateProposal) returns (routines.Response) {}
// }

enum PartyEvent{
    
    PARTY_ASSIGNED = 0;  // Assigned
    PARTY_DISABLE = 1;  // Disable
    PARTY_CONVERT_LEAD_TO_CONTACT = 2;  // Convert Lead To Contact
    PARTY_RE_ENABLE = 3;  // Re-Enable
}

enum PartyState{
    
//	Party: PARTY_ENABLED
//	├── Disable: Disabled
//	├── Assigned: Assigned
//	└── Convert Lead To Contact: Converted

    PARTY_ENABLED = 0;
    
//	Party: PARTY_DISABLED
//	└── Re-Enable: Enabled

    PARTY_DISABLED = 1;
    
}

// service PartyProcessor{
//  rpc Assigned(routines.StateProposal) returns (routines.Response) {}
//  rpc ConvertLeadToContact(routines.StateProposal) returns (routines.Response) {}
//  rpc ReEnable(routines.StateProposal) returns (routines.Response) {}
//  rpc Disable(routines.StateProposal) returns (routines.Response) {}
// }

enum ProjectTaskEvent{
    
    PT_ACTIVATED = 0;  // Activated
    PT_TASK_ON_HOLD = 1;  // Task On Hold
    PT_TASK_COMPLETE = 2;  // Task Complete
}

enum ProjectTaskState{
    
//	ProjectTask: PTS_CREATED
//	├── Task Complete: Completed
//	├── Task On Hold: On Hold
//	└── Task On Hold: Cancelled

    PTS_CREATED = 0;
    
//	ProjectTask: PTS_CREATED_UA

    PTS_CREATED_UA = 1;
    
//	ProjectTask: PTS_CREATED_AS

    PTS_CREATED_AS = 2;
    
//	ProjectTask: PTS_CREATED_IP

    PTS_CREATED_IP = 3;
    
//	ProjectTask: PTS_COMPLETED

    PTS_COMPLETED = 4;
    
//	ProjectTask: PTS_ON_HOLD
//	└── Activated: Created

    PTS_ON_HOLD = 5;
    
//	ProjectTask: PTS_CANCELLED

    PTS_CANCELLED = 6;
    
}

// service ProjectTaskProcessor{
//  rpc Activated(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc TaskOnHold(routines.StateProposal) returns (routines.Response) {}
// }

enum ShipmentEvent{
    
    SHIPMENT_SHIP = 0;  // Ship
    SHIPMENT_PACK = 1;  // Pack
    SHIPMENT_DELIVER = 2;  // Deliver
    SHIPMENT_CANCEL = 3;  // Cancel
    SHIPMENT_PICK = 4;  // Pick
    SHIPMENT_SCHEDULE = 5;  // Schedule
}

enum ShipmentState{
    
//	Shipment: SHIPMENT_INPUT
//	├── Schedule: Scheduled
//	├── Pick: Picked
//	├── Pack: Packed
//	└── Cancel: Cancelled

    SHIPMENT_INPUT = 0;
    
//	Shipment: SHIPMENT_SCHEDULED
//	├── Pick: Picked
//	├── Pack: Packed
//	└── Cancel: Cancelled

    SHIPMENT_SCHEDULED = 1;
    
//	Shipment: SHIPMENT_PICKED
//	├── Pack: Packed
//	└── Cancel: Cancelled

    SHIPMENT_PICKED = 2;
    
//	Shipment: SHIPMENT_PACKED
//	└── Ship: Shipped

    SHIPMENT_PACKED = 3;
    
//	Shipment: SHIPMENT_SHIPPED
//	└── Deliver: Delivered

    SHIPMENT_SHIPPED = 4;
    
//	Shipment: SHIPMENT_DELIVERED

    SHIPMENT_DELIVERED = 5;
    
//	Shipment: SHIPMENT_CANCELLED

    SHIPMENT_CANCELLED = 6;
    
}

// service ShipmentProcessor{
//  rpc Deliver(routines.StateProposal) returns (routines.Response) {}
//  rpc Pick(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancel(routines.StateProposal) returns (routines.Response) {}
//  rpc Schedule(routines.StateProposal) returns (routines.Response) {}
//  rpc Ship(routines.StateProposal) returns (routines.Response) {}
//  rpc Pack(routines.StateProposal) returns (routines.Response) {}
// }

enum OrderItemEvent{
    
    OI_APPROVE_ITEM = 0;  // Approve Item
    OI_REJECT_ITEM = 1;  // Reject Item
    OI_COMPLETE_ITEM = 2;  // Complete Item
    OI_CANCEL_ITEM = 3;  // Cancel Item
}

enum OrderItemState{
    
//	OrderItem: ITEM_CREATED
//	├── Approve Item: Approved
//	├── Reject Item: Rejected
//	└── Cancel Item: Cancelled

    ITEM_CREATED = 0;
    
//	OrderItem: ITEM_APPROVED
//	├── Complete Item: Completed
//	└── Cancel Item: Cancelled

    ITEM_APPROVED = 1;
    
//	OrderItem: ITEM_COMPLETED
//	└── Approve Item: Approved

    ITEM_COMPLETED = 2;
    
//	OrderItem: ITEM_REJECTED

    ITEM_REJECTED = 3;
    
//	OrderItem: ITEM_CANCELLED

    ITEM_CANCELLED = 4;
    
}

// service OrderItemProcessor{
//  rpc CancelItem(routines.StateProposal) returns (routines.Response) {}
//  rpc CompleteItem(routines.StateProposal) returns (routines.Response) {}
//  rpc ApproveItem(routines.StateProposal) returns (routines.Response) {}
//  rpc RejectItem(routines.StateProposal) returns (routines.Response) {}
// }

enum CustomRequestStatusEvent{
    
    CRS_REVIEW_REQUEST = 0;  // Review Request
    CRS_COMPLETE_REQUEST = 1;  // Complete Request
    CRS_CANCEL_REQUEST = 2;  // Cancel Request
    CRS_RE_OPEN_REQUEST = 3;  // Re-open Request
    CRS_REJECT_REQUEST = 4;  // Reject Request
    CRS_PENDING_CUSTOMER = 5;  // Pending customer
    CRS_ACCEPT_REQUEST = 6;  // Accept Request
    CRS_SUBMIT_REQUEST = 7;  // Submit Request
}

enum CustomRequestStatusState{
    
//	CustomRequestStatus: CRQ_DRAFT
//	├── Accept Request: Open
//	├── Submit Request: Submitted
//	└── Cancel Request: Cancelled

    CRQ_DRAFT = 0;
    
//	CustomRequestStatus: CRQ_SUBMITTED
//	├── Accept Request: Open
//	├── Complete Request: Completed
//	├── Reject Request: Rejected
//	├── Cancel Request: Cancelled
//	└── Pending customer: Pending Cust.

    CRQ_SUBMITTED = 1;
    
//	CustomRequestStatus: CRQ_ACCEPTED
//	├── Review Request: Being implemented
//	├── Complete Request: Completed
//	├── Cancel Request: Cancelled
//	└── Pending Customer: Pending Cust.

    CRQ_ACCEPTED = 2;
    
//	CustomRequestStatus: CRQ_REVIEWED
//	├── Complete Request: Completed
//	├── Cancel Request: Cancelled
//	├── Pending Customer: Pending Cust.
//	└── Accept Request: Open

    CRQ_REVIEWED = 3;
    
//	CustomRequestStatus: CRQ_COMPLETED
//	├── Re-open Request: Being implemented
//	└── Re-open Request: Reopened

    CRQ_COMPLETED = 4;
    
//	CustomRequestStatus: CRQ_REOPENED
//	├── Complete Request: Completed
//	├── Cancel Request: Cancelled
//	├── Pending Customer: Pending Cust.
//	├── Accept Request: Open
//	└── Review Request: Being implemented

    CRQ_REOPENED = 5;
    
//	CustomRequestStatus: CRQ_PENDING
//	├── Submit Request: Submitted
//	├── Accept Request: Open
//	├── Review Request: Being implemented
//	└── Cancel Request: Cancelled

    CRQ_PENDING = 6;
    
//	CustomRequestStatus: CRQ_REJECTED

    CRQ_REJECTED = 7;
    
//	CustomRequestStatus: CRQ_CANCELLED
//	└── Re-open Request: Open

    CRQ_CANCELLED = 8;
    
}

// service CustomRequestStatusProcessor{
//  rpc RejectRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc AcceptRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc PendingCustomer(routines.StateProposal) returns (routines.Response) {}
//  rpc CompleteRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc ReOpenRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc SubmitRequest(routines.StateProposal) returns (routines.Response) {}
//  rpc ReviewRequest(routines.StateProposal) returns (routines.Response) {}
// }

enum LeadStatusEvent{
    
    LS_QUALIFIED = 0;  // Qualified
    LS_CONVERTED = 1;  // Converted
    LS_DISABLED = 2;  // Disabled
}

enum LeadStatusState{
    
//	LeadStatus: LEAD_ASSIGNED
//	├── Converted: Converted
//	├── Qualified: Qualified
//	└── Disabled: Disabled

    LEAD_ASSIGNED = 0;
    
//	LeadStatus: LEAD_CONVERTED
//	└── Disabled: Disabled

    LEAD_CONVERTED = 1;
    
//	LeadStatus: LEAD_QUALIFIED

    LEAD_QUALIFIED = 2;
    
}

// service LeadStatusProcessor{
//  rpc Converted(routines.StateProposal) returns (routines.Response) {}
//  rpc Qualified(routines.StateProposal) returns (routines.Response) {}
//  rpc Disabled(routines.StateProposal) returns (routines.Response) {}
// }

enum NonSerializedInventoryItemEvent{
    
    NSII_MARK_RETURN_DEFECTIVE = 0;  // Mark Return Defective
    NSII_MAKE_RETURN_HELD = 1;  // Make Return Held
}

enum NonSerializedInventoryItemState{
    
//	NonSerializedInventoryItem: INV_NS_ON_HOLD

    INV_NS_ON_HOLD = 0;
    
//	NonSerializedInventoryItem: INV_NS_RETURNED
//	├── Make Return Held: On Hold (Non-Serialized)
//	└── Mark Return Defective: Defective (Non-Serialized)

    INV_NS_RETURNED = 1;
    
//	NonSerializedInventoryItem: INV_NS_DEFECTIVE

    INV_NS_DEFECTIVE = 2;
    
}

// service NonSerializedInventoryItemProcessor{
//  rpc MakeReturnHeld(routines.StateProposal) returns (routines.Response) {}
//  rpc MarkReturnDefective(routines.StateProposal) returns (routines.Response) {}
// }

enum OrderEvent{
    
    ORDER_PROCESS_ORDER = 0;  // Process Order
    ORDER_SEND_ORDER = 1;  // Send Order
    ORDER_REJECT_ORDER = 2;  // Reject Order
    ORDER_APPROVE_ORDER = 3;  // Approve Order
    ORDER_ORDER_CANCELLED = 4;  // Order Cancelled
    ORDER_HOLD_ORDER = 5;  // Hold Order
    ORDER_CANCEL_ORDER = 6;  // Cancel Order
    ORDER_COMPLETE_ORDER = 7;  // Complete Order
    ORDER_ORDER_COMPLETED = 8;  // Order Completed
}

enum OrderState{
    
//	Order: ORDER_CREATED
//	├── Process Order: Processing
//	├── Approve Order: Approved
//	├── Hold Order: Held
//	├── Reject Order: Rejected
//	└── Cancel Order: Cancelled

    ORDER_CREATED = 0;
    
//	Order: ORDER_SENT
//	├── Order Completed: Completed
//	└── Order Cancelled: Cancelled

    ORDER_SENT = 1;
    
//	Order: ORDER_PROCESSING
//	├── Hold Order: Held
//	├── Approve Order: Approved
//	├── Reject Order: Rejected
//	└── Cancel Order: Cancelled

    ORDER_PROCESSING = 2;
    
//	Order: ORDER_APPROVED
//	├── Send Order: Sent
//	├── Process Order: Processing
//	├── Complete Order: Completed
//	├── Cancel Order: Cancelled
//	└── Hold Order: Held

    ORDER_APPROVED = 3;
    
//	Order: ORDER_HOLD
//	├── Process Order: Processing
//	├── Approve Order: Approved
//	└── Cancel Order: Cancelled

    ORDER_HOLD = 4;
    
//	Order: ORDER_COMPLETED
//	└── Approve Order: Approved

    ORDER_COMPLETED = 5;
    
//	Order: ORDER_REJECTED

    ORDER_REJECTED = 6;
    
//	Order: ORDER_CANCELLED

    ORDER_CANCELLED = 7;
    
}

// service OrderProcessor{
//  rpc SendOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc OrderCancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc ProcessOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc CompleteOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc HoldOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc ApproveOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc OrderCompleted(routines.StateProposal) returns (routines.Response) {}
//  rpc CancelOrder(routines.StateProposal) returns (routines.Response) {}
//  rpc RejectOrder(routines.StateProposal) returns (routines.Response) {}
// }

enum TimesheetEvent{
    
    TIMESHEET_CONFIRM_COMPLETE = 0;  // Confirm complete
    TIMESHEET_APPROVE = 1;  // Approve
}

enum TimesheetState{
    
//	Timesheet: TIMESHEET_IN_PROCESS
//	└── Confirm complete: Completed

    TIMESHEET_IN_PROCESS = 0;
    
//	Timesheet: TIMESHEET_COMPLETED
//	└── Approve: Approved

    TIMESHEET_COMPLETED = 1;
    
//	Timesheet: TIMESHEET_APPROVED

    TIMESHEET_APPROVED = 2;
    
}

// service TimesheetProcessor{
//  rpc ConfirmComplete(routines.StateProposal) returns (routines.Response) {}
//  rpc Approve(routines.StateProposal) returns (routines.Response) {}
// }

enum PartyInvitationEvent{
    
    PI_ACCEPTED = 0;  // Accepted
    PI_DECLINED = 1;  // Declined
    PI_CANCELLED = 2;  // Cancelled
    PI_PENDING = 3;  // Pending
}

enum PartyInvitationState{
    
//	PartyInvitation: PARTYINV_SENT
//	├── Pending: Invitation Pending
//	├── Accepted: Invitation Accepted
//	├── Declined: Invitation Declined
//	└── Cancelled: Invitation Cancelled

    PARTYINV_SENT = 0;
    
//	PartyInvitation: PARTYINV_PENDING
//	├── Accepted: Invitation Accepted
//	└── Cancelled: Invitation Cancelled

    PARTYINV_PENDING = 1;
    
//	PartyInvitation: PARTYINV_ACCEPTED

    PARTYINV_ACCEPTED = 2;
    
//	PartyInvitation: PARTYINV_DECLINED

    PARTYINV_DECLINED = 3;
    
//	PartyInvitation: PARTYINV_CANCELLED

    PARTYINV_CANCELLED = 4;
    
}

// service PartyInvitationProcessor{
//  rpc Declined(routines.StateProposal) returns (routines.Response) {}
//  rpc Cancelled(routines.StateProposal) returns (routines.Response) {}
//  rpc Pending(routines.StateProposal) returns (routines.Response) {}
//  rpc Accepted(routines.StateProposal) returns (routines.Response) {}
// }

enum ContactListPartyEvent{
    
    CLP_SUBSCRIPTION_ACCEPTED_UNSUBSCRIBED = 0;  // Subscription Accepted - Unsubscribed
    CLP_PENDING_ACCEPT = 1;  // Pending Accept
    CLP_REJECT = 2;  // Reject
    CLP_SUBSCRIPTION_IN_USE_UNSUBSCRIBED = 3;  // Subscription In Use - Unsubscribed
    CLP_ACCEPT = 4;  // Accept
    CLP_INVALID = 5;  // Invalid
    CLP_SUBSCRIPTION_INVALID_UNSUBSCRIBED = 6;  // Subscription Invalid - Unsubscribed
    CLP_SUBSCRIPTION_ACCEPTED_UNSUBSCRIPTION_PENDING = 7;  // Subscription Accepted - Unsubscription Pending
    CLP_SUBSCRIPTION_IN_USE_UNSUBSCRIPTION_PENDING = 8;  // Subscription In Use - Unsubscription Pending
    CLP_SUBSCRIPTION_INVALID_UNSUBSCRIPTION_PENDING = 9;  // Subscription Invalid - Unsubscription Pending
    CLP_SUBSCRIPTION_PENDING_UNSUBSCRIPTION_PENDING = 10;  // Subscription Pending - Unsubscription Pending
    CLP_LOCKED_IN_USE = 11;  // Locked - In Use
}

enum ContactListPartyState{
    
//	ContactListParty: CLPT_PENDING
//	├── Accept: Accepted
//	├── Reject: Rejected
//	├── Subscription Pending - Unsubscription Pending: Unsubscription pending
//	└── Subscription Accepted - Unsubscribed: Unsubscribed

    CLPT_PENDING = 0;
    
//	ContactListParty: CLPT_ACCEPTED
//	├── Reject: Rejected
//	├── Locked - In Use: In Use
//	├── Invalid: Invalid
//	├── Subscription Accepted - Unsubscription Pending: Unsubscription pending
//	└── Subscription Accepted - Unsubscribed: Unsubscribed

    CLPT_ACCEPTED = 1;
    
//	ContactListParty: CLPT_REJECTED
//	├── Accept: Accepted
//	└── Pending Accept: Pending Acceptance

    CLPT_REJECTED = 2;
    
//	ContactListParty: CLPT_IN_USE
//	├── Subscription In Use - Unsubscription Pending: Unsubscription pending
//	└── Subscription In Use - Unsubscribed: Unsubscribed

    CLPT_IN_USE = 3;
    
//	ContactListParty: CLPT_INVALID
//	├── Subscription Invalid - Unsubscription Pending: Unsubscription pending
//	└── Subscription Invalid - Unsubscribed: Unsubscribed

    CLPT_INVALID = 4;
    
//	ContactListParty: CLPT_UNSUBS_PENDING

    CLPT_UNSUBS_PENDING = 5;
    
//	ContactListParty: CLPT_UNSUBSCRIBED

    CLPT_UNSUBSCRIBED = 6;
    
}

// service ContactListPartyProcessor{
//  rpc SubscriptionInUseUnsubscribed(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionPendingUnsubscriptionPending(routines.StateProposal) returns (routines.Response) {}
//  rpc Reject(routines.StateProposal) returns (routines.Response) {}
//  rpc PendingAccept(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionInUseUnsubscriptionPending(routines.StateProposal) returns (routines.Response) {}
//  rpc Accept(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionAcceptedUnsubscriptionPending(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionInvalidUnsubscriptionPending(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionAcceptedUnsubscribed(routines.StateProposal) returns (routines.Response) {}
//  rpc SubscriptionInvalidUnsubscribed(routines.StateProposal) returns (routines.Response) {}
//  rpc LockedInUse(routines.StateProposal) returns (routines.Response) {}
//  rpc Invalid(routines.StateProposal) returns (routines.Response) {}
// }


// total: 56
